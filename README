Viziru Luciana
Virtual Memory Mechanism

A linkedlist was used for keeping track of the allocated virtual memory zones.

The used structs are defined in the helper.h file.

In the vmsim_init() function, the signal handler is replaced with vmsim_handler
which will only take action for the SIGSEGV signals. Also, the linkedlist
container is initialized. vmsim_cleanup() will perform the opposite actions,
reseting the signal handler and freeing the allocated memory.

When a new virtual memory chunk is allocated, the ram and swap files are
created, opened and trunked - "ramx" and "swapx" for the zone number x.
These files will be deleted at the vmsim_free() call for the given memory zone.
For each memory chunk, an array of pages (page_table) and an array of frames
(frames) are held in the dedicated struct, along with the file handles and the
memory zone id. The full virtual memory zone is mapped in the process memory and
the beginning address is held for each page, in order to be handled individually.

Some auxiliary functions:
Functii auxiliare adaugate sunt:
- get_page_for_address - the beginning address of the page containing the given
address or NULL if it doesn't exist
- get_free_frame - the address of the first free frame in RAM or NULL fi it
doesn't exist
- swap_out - it swaps out a randomly chosen fram from RAM, by taking the page
to swap and returns the frame address
- change_to_prot_write - it adds R and W permisiions to a given page

Regarding the internal logic, when receiving a page fault, the cause dictates
the following operations.
